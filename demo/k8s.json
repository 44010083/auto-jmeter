{
	"swagger": "2.0",
	"info": {
		"title": "Kubernetes",
		"version": "v1.12.6"
	},
	"paths": {
		"/api/": {
			"get": {
				"description": "get available API versions",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core"
				],
				"operationId": "getCoreAPIVersions",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/api/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "getCoreV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/api/v1/componentstatuses": {
			"get": {
				"description": "list objects of kind ComponentStatus",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1ComponentStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatusList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ComponentStatus",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/componentstatuses/{name}": {
			"get": {
				"description": "read the specified ComponentStatus",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1ComponentStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ComponentStatus",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ComponentStatus",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/configmaps": {
			"get": {
				"description": "list or watch objects of kind ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1ConfigMapForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/endpoints": {
			"get": {
				"description": "list or watch objects of kind Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1EndpointsForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.EndpointsList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/events": {
			"get": {
				"description": "list or watch objects of kind Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1EventForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.EventList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/limitranges": {
			"get": {
				"description": "list or watch objects of kind LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1LimitRangeForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces": {
			"get": {
				"description": "list or watch objects of kind Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1Namespace",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.NamespaceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1Namespace",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/bindings": {
			"post": {
				"description": "create a Binding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedBinding",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Binding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/configmaps": {
			"get": {
				"description": "list or watch objects of kind ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedConfigMap",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedConfigMap",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedConfigMap",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/configmaps/{name}": {
			"get": {
				"description": "read the specified ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedConfigMap",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedConfigMap",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ConfigMap",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedConfigMap",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ConfigMap",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedConfigMap",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ConfigMap",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/endpoints": {
			"get": {
				"description": "list or watch objects of kind Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedEndpoints",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.EndpointsList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"post": {
				"description": "create Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedEndpoints",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedEndpoints",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/endpoints/{name}": {
			"get": {
				"description": "read the specified Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedEndpoints",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedEndpoints",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete Endpoints",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedEndpoints",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Endpoints",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedEndpoints",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Endpoints",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/events": {
			"get": {
				"description": "list or watch objects of kind Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedEvent",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.EventList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"post": {
				"description": "create an Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedEvent",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/events/{name}": {
			"get": {
				"description": "read the specified Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedEvent",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete an Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Event",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Event",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/limitranges": {
			"get": {
				"description": "list or watch objects of kind LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedLimitRange",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedLimitRange",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedLimitRange",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/limitranges/{name}": {
			"get": {
				"description": "read the specified LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedLimitRange",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedLimitRange",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a LimitRange",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedLimitRange",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified LimitRange",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedLimitRange",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the LimitRange",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/persistentvolumeclaims": {
			"get": {
				"description": "list or watch objects of kind PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedPersistentVolumeClaim",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedPersistentVolumeClaim",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedPersistentVolumeClaim",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}": {
			"get": {
				"description": "read the specified PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedPersistentVolumeClaim",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedPersistentVolumeClaim",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedPersistentVolumeClaim",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified PersistentVolumeClaim",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedPersistentVolumeClaim",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PersistentVolumeClaim",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status": {
			"get": {
				"description": "read status of the specified PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedPersistentVolumeClaimStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedPersistentVolumeClaimStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified PersistentVolumeClaim",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedPersistentVolumeClaimStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PersistentVolumeClaim",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods": {
			"get": {
				"description": "list or watch objects of kind Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedPod",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedPod",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedPod",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}": {
			"get": {
				"description": "read the specified Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedPod",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedPod",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedPod",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Pod",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedPod",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Pod",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/attach": {
			"get": {
				"description": "connect GET requests to attach of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedPodAttach",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodAttachOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to attach of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedPodAttach",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodAttachOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
					"name": "container",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodAttachOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
					"name": "stderr",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
					"name": "stdin",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
					"name": "stdout",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
					"name": "tty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/binding": {
			"post": {
				"description": "create binding of a Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedPodBinding",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Binding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Binding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Binding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/eviction": {
			"post": {
				"description": "create eviction of a Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedPodEviction",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "Eviction",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Eviction",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/exec": {
			"get": {
				"description": "connect GET requests to exec of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedPodExec",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodExecOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to exec of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedPodExec",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodExecOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "Command is the remote command to execute. argv array. Not executed within a shell.",
					"name": "command",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
					"name": "container",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodExecOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Redirect the standard error stream of the pod for this call. Defaults to true.",
					"name": "stderr",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Redirect the standard input stream of the pod for this call. Defaults to false.",
					"name": "stdin",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Redirect the standard output stream of the pod for this call. Defaults to true.",
					"name": "stdout",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
					"name": "tty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/log": {
			"get": {
				"description": "read log of the specified Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"text/plain",
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedPodLog",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
					"name": "container",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Follow the log stream of the pod. Defaults to false.",
					"name": "follow",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
					"name": "limitBytes",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Pod",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Return previous terminated container logs. Defaults to false.",
					"name": "previous",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
					"name": "sinceSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
					"name": "tailLines",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
					"name": "timestamps",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/portforward": {
			"get": {
				"description": "connect GET requests to portforward of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedPodPortforward",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodPortForwardOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to portforward of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedPodPortforward",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodPortForwardOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodPortForwardOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "List of ports to forward Required when using WebSockets",
					"name": "ports",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/proxy": {
			"get": {
				"description": "connect GET requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"put": {
				"description": "connect PUT requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PutNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"delete": {
				"description": "connect DELETE requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1DeleteNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"options": {
				"description": "connect OPTIONS requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1OptionsNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"head": {
				"description": "connect HEAD requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1HeadNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"patch": {
				"description": "connect PATCH requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PatchNamespacedPodProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodProxyOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Path is the URL path to use for the current proxy request to pod.",
					"name": "path",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}": {
			"get": {
				"description": "connect GET requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"put": {
				"description": "connect PUT requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PutNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"delete": {
				"description": "connect DELETE requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1DeleteNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"options": {
				"description": "connect OPTIONS requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1OptionsNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"head": {
				"description": "connect HEAD requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1HeadNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"patch": {
				"description": "connect PATCH requests to proxy of Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PatchNamespacedPodProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodProxyOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodProxyOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "path to the resource",
					"name": "path",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Path is the URL path to use for the current proxy request to pod.",
					"name": "path",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/pods/{name}/status": {
			"get": {
				"description": "read status of the specified Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedPodStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedPodStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Pod",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedPodStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Pod"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Pod",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/podtemplates": {
			"get": {
				"description": "list or watch objects of kind PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedPodTemplate",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedPodTemplate",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedPodTemplate",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/podtemplates/{name}": {
			"get": {
				"description": "read the specified PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedPodTemplate",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedPodTemplate",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedPodTemplate",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified PodTemplate",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedPodTemplate",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodTemplate",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/replicationcontrollers": {
			"get": {
				"description": "list or watch objects of kind ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedReplicationController",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedReplicationController",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedReplicationController",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {
			"get": {
				"description": "read the specified ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedReplicationController",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedReplicationController",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedReplicationController",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ReplicationController",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedReplicationController",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicationController",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {
			"get": {
				"description": "read scale of the specified ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedReplicationControllerScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace scale of the specified ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedReplicationControllerScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified ReplicationController",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedReplicationControllerScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status": {
			"get": {
				"description": "read status of the specified ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedReplicationControllerStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedReplicationControllerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified ReplicationController",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedReplicationControllerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicationController",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/resourcequotas": {
			"get": {
				"description": "list or watch objects of kind ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedResourceQuota",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedResourceQuota",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedResourceQuota",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/resourcequotas/{name}": {
			"get": {
				"description": "read the specified ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedResourceQuota",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedResourceQuota",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedResourceQuota",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ResourceQuota",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedResourceQuota",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ResourceQuota",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/resourcequotas/{name}/status": {
			"get": {
				"description": "read status of the specified ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedResourceQuotaStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedResourceQuotaStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified ResourceQuota",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedResourceQuotaStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ResourceQuota",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/secrets": {
			"get": {
				"description": "list or watch objects of kind Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedSecret",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.SecretList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedSecret",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedSecret",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/secrets/{name}": {
			"get": {
				"description": "read the specified Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedSecret",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedSecret",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedSecret",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Secret",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedSecret",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Secret"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Secret",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/serviceaccounts": {
			"get": {
				"description": "list or watch objects of kind ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedServiceAccount",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedServiceAccount",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNamespacedServiceAccount",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {
			"get": {
				"description": "read the specified ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedServiceAccount",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedServiceAccount",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedServiceAccount",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ServiceAccount",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedServiceAccount",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ServiceAccount",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/services": {
			"get": {
				"description": "list or watch objects of kind Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1NamespacedService",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1NamespacedService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/services/{name}": {
			"get": {
				"description": "read the specified Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedService",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1NamespacedService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Service",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Service",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/services/{name}/proxy": {
			"get": {
				"description": "connect GET requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"put": {
				"description": "connect PUT requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PutNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"delete": {
				"description": "connect DELETE requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1DeleteNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"options": {
				"description": "connect OPTIONS requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1OptionsNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"head": {
				"description": "connect HEAD requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1HeadNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"patch": {
				"description": "connect PATCH requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PatchNamespacedServiceProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ServiceProxyOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
					"name": "path",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}": {
			"get": {
				"description": "connect GET requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"put": {
				"description": "connect PUT requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PutNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"delete": {
				"description": "connect DELETE requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1DeleteNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"options": {
				"description": "connect OPTIONS requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1OptionsNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"head": {
				"description": "connect HEAD requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1HeadNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"patch": {
				"description": "connect PATCH requests to proxy of Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PatchNamespacedServiceProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceProxyOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ServiceProxyOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "path to the resource",
					"name": "path",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
					"name": "path",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{namespace}/services/{name}/status": {
			"get": {
				"description": "read status of the specified Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespacedServiceStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespacedServiceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Service",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespacedServiceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Service",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{name}": {
			"get": {
				"description": "read the specified Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1Namespace",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1Namespace",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1Namespace",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Namespace",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1Namespace",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Namespace",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{name}/finalize": {
			"put": {
				"description": "replace finalize of the specified Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespaceFinalize",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Namespace",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/namespaces/{name}/status": {
			"get": {
				"description": "read status of the specified Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NamespaceStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified Namespace",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NamespaceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Namespace",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NamespaceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Namespace",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/nodes": {
			"get": {
				"description": "list or watch objects of kind Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1Node",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.NodeList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1Node",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionNode",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/nodes/{name}": {
			"get": {
				"description": "read the specified Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1Node",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1Node",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1Node",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Node",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1Node",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Node",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/nodes/{name}/proxy": {
			"get": {
				"description": "connect GET requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"put": {
				"description": "connect PUT requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PutNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"delete": {
				"description": "connect DELETE requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1DeleteNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"options": {
				"description": "connect OPTIONS requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1OptionsNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"head": {
				"description": "connect HEAD requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1HeadNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"patch": {
				"description": "connect PATCH requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PatchNodeProxy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the NodeProxyOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Path is the URL path to use for the current proxy request to node.",
					"name": "path",
					"in": "query"
				}
			]
		},
		"/api/v1/nodes/{name}/proxy/{path}": {
			"get": {
				"description": "connect GET requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1GetNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"put": {
				"description": "connect PUT requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PutNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"post": {
				"description": "connect POST requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PostNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"delete": {
				"description": "connect DELETE requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1DeleteNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"options": {
				"description": "connect OPTIONS requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1OptionsNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"head": {
				"description": "connect HEAD requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1HeadNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"patch": {
				"description": "connect PATCH requests to proxy of Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"*/*"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "connectCoreV1PatchNodeProxyWithPath",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "string"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "connect",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "NodeProxyOptions",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the NodeProxyOptions",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "path to the resource",
					"name": "path",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "Path is the URL path to use for the current proxy request to node.",
					"name": "path",
					"in": "query"
				}
			]
		},
		"/api/v1/nodes/{name}/status": {
			"get": {
				"description": "read status of the specified Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1NodeStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified Node",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1NodeStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Node",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1NodeStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.Node"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Node",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/persistentvolumeclaims": {
			"get": {
				"description": "list or watch objects of kind PersistentVolumeClaim",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1PersistentVolumeClaimForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/persistentvolumes": {
			"get": {
				"description": "list or watch objects of kind PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1PersistentVolume",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "createCoreV1PersistentVolume",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1CollectionPersistentVolume",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/persistentvolumes/{name}": {
			"get": {
				"description": "read the specified PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1PersistentVolume",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1PersistentVolume",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "deleteCoreV1PersistentVolume",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified PersistentVolume",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1PersistentVolume",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PersistentVolume",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/persistentvolumes/{name}/status": {
			"get": {
				"description": "read status of the specified PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "readCoreV1PersistentVolumeStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified PersistentVolume",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "replaceCoreV1PersistentVolumeStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified PersistentVolume",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "patchCoreV1PersistentVolumeStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PersistentVolume",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/api/v1/pods": {
			"get": {
				"description": "list or watch objects of kind Pod",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1PodForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/podtemplates": {
			"get": {
				"description": "list or watch objects of kind PodTemplate",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1PodTemplateForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/replicationcontrollers": {
			"get": {
				"description": "list or watch objects of kind ReplicationController",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1ReplicationControllerForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/resourcequotas": {
			"get": {
				"description": "list or watch objects of kind ResourceQuota",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1ResourceQuotaForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/secrets": {
			"get": {
				"description": "list or watch objects of kind Secret",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1SecretForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.SecretList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/serviceaccounts": {
			"get": {
				"description": "list or watch objects of kind ServiceAccount",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1ServiceAccountForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/services": {
			"get": {
				"description": "list or watch objects of kind Service",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "listCoreV1ServiceForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.core.v1.ServiceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/configmaps": {
			"get": {
				"description": "watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1ConfigMapListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/endpoints": {
			"get": {
				"description": "watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1EndpointsListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/events": {
			"get": {
				"description": "watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1EventListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/limitranges": {
			"get": {
				"description": "watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1LimitRangeListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces": {
			"get": {
				"description": "watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespaceList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/configmaps": {
			"get": {
				"description": "watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedConfigMapList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/configmaps/{name}": {
			"get": {
				"description": "watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedConfigMap",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ConfigMap",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ConfigMap",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/endpoints": {
			"get": {
				"description": "watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedEndpointsList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/endpoints/{name}": {
			"get": {
				"description": "watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedEndpoints",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Endpoints",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Endpoints",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/events": {
			"get": {
				"description": "watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedEventList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/events/{name}": {
			"get": {
				"description": "watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedEvent",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Event",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Event",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/limitranges": {
			"get": {
				"description": "watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedLimitRangeList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/limitranges/{name}": {
			"get": {
				"description": "watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedLimitRange",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "LimitRange",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the LimitRange",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims": {
			"get": {
				"description": "watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedPersistentVolumeClaimList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}": {
			"get": {
				"description": "watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedPersistentVolumeClaim",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PersistentVolumeClaim",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/pods": {
			"get": {
				"description": "watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedPodList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/pods/{name}": {
			"get": {
				"description": "watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedPod",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Pod",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/podtemplates": {
			"get": {
				"description": "watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedPodTemplateList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/podtemplates/{name}": {
			"get": {
				"description": "watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedPodTemplate",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodTemplate",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/replicationcontrollers": {
			"get": {
				"description": "watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedReplicationControllerList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}": {
			"get": {
				"description": "watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedReplicationController",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicationController",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/resourcequotas": {
			"get": {
				"description": "watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedResourceQuotaList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}": {
			"get": {
				"description": "watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedResourceQuota",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ResourceQuota",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/secrets": {
			"get": {
				"description": "watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedSecretList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/secrets/{name}": {
			"get": {
				"description": "watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedSecret",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Secret",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/serviceaccounts": {
			"get": {
				"description": "watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedServiceAccountList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}": {
			"get": {
				"description": "watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedServiceAccount",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ServiceAccount",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/services": {
			"get": {
				"description": "watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedServiceList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{namespace}/services/{name}": {
			"get": {
				"description": "watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NamespacedService",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Service",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/namespaces/{name}": {
			"get": {
				"description": "watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1Namespace",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Namespace",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Namespace",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/nodes": {
			"get": {
				"description": "watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1NodeList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/nodes/{name}": {
			"get": {
				"description": "watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1Node",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Node",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Node",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/persistentvolumeclaims": {
			"get": {
				"description": "watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1PersistentVolumeClaimListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolumeClaim",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/persistentvolumes": {
			"get": {
				"description": "watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1PersistentVolumeList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/persistentvolumes/{name}": {
			"get": {
				"description": "watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1PersistentVolume",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PersistentVolume",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PersistentVolume",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/pods": {
			"get": {
				"description": "watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1PodListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Pod",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/podtemplates": {
			"get": {
				"description": "watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1PodTemplateListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "PodTemplate",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/replicationcontrollers": {
			"get": {
				"description": "watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1ReplicationControllerListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ReplicationController",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/resourcequotas": {
			"get": {
				"description": "watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1ResourceQuotaListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ResourceQuota",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/secrets": {
			"get": {
				"description": "watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1SecretListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Secret",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/serviceaccounts": {
			"get": {
				"description": "watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1ServiceAccountListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "ServiceAccount",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/api/v1/watch/services": {
			"get": {
				"description": "watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"core_v1"
				],
				"operationId": "watchCoreV1ServiceListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "",
					"kind": "Service",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/": {
			"get": {
				"description": "get available API versions",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apis"
				],
				"operationId": "getAPIVersions",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/admissionregistration.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration"
				],
				"operationId": "getAdmissionregistrationAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/admissionregistration.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "getAdmissionregistrationV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations": {
			"get": {
				"description": "list or watch objects of kind MutatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "listAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a MutatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "createAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of MutatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}": {
			"get": {
				"description": "read the specified MutatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "readAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified MutatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a MutatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified MutatingWebhookConfiguration",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "patchAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the MutatingWebhookConfiguration",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations": {
			"get": {
				"description": "list or watch objects of kind ValidatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "listAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a ValidatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "createAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of ValidatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}": {
			"get": {
				"description": "read the specified ValidatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "readAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified ValidatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a ValidatingWebhookConfiguration",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified ValidatingWebhookConfiguration",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ValidatingWebhookConfiguration",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations": {
			"get": {
				"description": "watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "watchAdmissionregistrationV1beta1MutatingWebhookConfigurationList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}": {
			"get": {
				"description": "watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "watchAdmissionregistrationV1beta1MutatingWebhookConfiguration",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "MutatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the MutatingWebhookConfiguration",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations": {
			"get": {
				"description": "watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}": {
			"get": {
				"description": "watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"admissionregistration_v1beta1"
				],
				"operationId": "watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "admissionregistration.k8s.io",
					"kind": "ValidatingWebhookConfiguration",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ValidatingWebhookConfiguration",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apiextensions.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions"
				],
				"operationId": "getApiextensionsAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apiextensions.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "getApiextensionsV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions": {
			"get": {
				"description": "list or watch objects of kind CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "listApiextensionsV1beta1CustomResourceDefinition",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "createApiextensionsV1beta1CustomResourceDefinition",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "deleteApiextensionsV1beta1CollectionCustomResourceDefinition",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}": {
			"get": {
				"description": "read the specified CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "readApiextensionsV1beta1CustomResourceDefinition",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "replaceApiextensionsV1beta1CustomResourceDefinition",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "deleteApiextensionsV1beta1CustomResourceDefinition",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified CustomResourceDefinition",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "patchApiextensionsV1beta1CustomResourceDefinition",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CustomResourceDefinition",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status": {
			"get": {
				"description": "read status of the specified CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "readApiextensionsV1beta1CustomResourceDefinitionStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified CustomResourceDefinition",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "replaceApiextensionsV1beta1CustomResourceDefinitionStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified CustomResourceDefinition",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "patchApiextensionsV1beta1CustomResourceDefinitionStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CustomResourceDefinition",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions": {
			"get": {
				"description": "watch individual changes to a list of CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "watchApiextensionsV1beta1CustomResourceDefinitionList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}": {
			"get": {
				"description": "watch changes to an object of kind CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiextensions_v1beta1"
				],
				"operationId": "watchApiextensionsV1beta1CustomResourceDefinition",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apiextensions.k8s.io",
					"kind": "CustomResourceDefinition",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CustomResourceDefinition",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration"
				],
				"operationId": "getApiregistrationAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apiregistration.k8s.io/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "getApiregistrationV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apiregistration.k8s.io/v1/apiservices": {
			"get": {
				"description": "list or watch objects of kind APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "listApiregistrationV1APIService",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"post": {
				"description": "create an APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "createApiregistrationV1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "deleteApiregistrationV1CollectionAPIService",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1/apiservices/{name}": {
			"get": {
				"description": "read the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "readApiregistrationV1APIService",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "replaceApiregistrationV1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete an APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "deleteApiregistrationV1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified APIService",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "patchApiregistrationV1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the APIService",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1/apiservices/{name}/status": {
			"get": {
				"description": "read status of the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "readApiregistrationV1APIServiceStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "replaceApiregistrationV1APIServiceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified APIService",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "patchApiregistrationV1APIServiceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the APIService",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1/watch/apiservices": {
			"get": {
				"description": "watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "watchApiregistrationV1APIServiceList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}": {
			"get": {
				"description": "watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1"
				],
				"operationId": "watchApiregistrationV1APIService",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the APIService",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "getApiregistrationV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apiregistration.k8s.io/v1beta1/apiservices": {
			"get": {
				"description": "list or watch objects of kind APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "listApiregistrationV1beta1APIService",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create an APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "createApiregistrationV1beta1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "deleteApiregistrationV1beta1CollectionAPIService",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}": {
			"get": {
				"description": "read the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "readApiregistrationV1beta1APIService",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "replaceApiregistrationV1beta1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete an APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "deleteApiregistrationV1beta1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified APIService",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "patchApiregistrationV1beta1APIService",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the APIService",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status": {
			"get": {
				"description": "read status of the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "readApiregistrationV1beta1APIServiceStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified APIService",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "replaceApiregistrationV1beta1APIServiceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified APIService",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "patchApiregistrationV1beta1APIServiceStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the APIService",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1beta1/watch/apiservices": {
			"get": {
				"description": "watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "watchApiregistrationV1beta1APIServiceList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}": {
			"get": {
				"description": "watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apiregistration_v1beta1"
				],
				"operationId": "watchApiregistrationV1beta1APIService",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apiregistration.k8s.io",
					"kind": "APIService",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the APIService",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps"
				],
				"operationId": "getAppsAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apps/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "getAppsV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apps/v1/controllerrevisions": {
			"get": {
				"description": "list or watch objects of kind ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1ControllerRevisionForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevisionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/daemonsets": {
			"get": {
				"description": "list or watch objects of kind DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1DaemonSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1DeploymentForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {
			"get": {
				"description": "list or watch objects of kind ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1NamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevisionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "createAppsV1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1CollectionNamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}": {
			"get": {
				"description": "read the specified ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ControllerRevision",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ControllerRevision",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/daemonsets": {
			"get": {
				"description": "list or watch objects of kind DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1NamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "createAppsV1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1CollectionNamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {
			"get": {
				"description": "read the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified DaemonSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status": {
			"get": {
				"description": "read status of the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedDaemonSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedDaemonSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified DaemonSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedDaemonSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "createAppsV1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1CollectionNamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "read the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale": {
			"get": {
				"description": "read scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedDeploymentScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status": {
			"get": {
				"description": "read status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedDeploymentStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/replicasets": {
			"get": {
				"description": "list or watch objects of kind ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1NamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "createAppsV1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1CollectionNamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/replicasets/{name}": {
			"get": {
				"description": "read the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale": {
			"get": {
				"description": "read scale of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedReplicaSetScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace scale of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedReplicaSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedReplicaSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status": {
			"get": {
				"description": "read status of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedReplicaSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedReplicaSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedReplicaSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/statefulsets": {
			"get": {
				"description": "list or watch objects of kind StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1NamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "createAppsV1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1CollectionNamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {
			"get": {
				"description": "read the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "deleteAppsV1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale": {
			"get": {
				"description": "read scale of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedStatefulSetScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace scale of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedStatefulSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedStatefulSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "Scale",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status": {
			"get": {
				"description": "read status of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "readAppsV1NamespacedStatefulSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "replaceAppsV1NamespacedStatefulSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "patchAppsV1NamespacedStatefulSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/replicasets": {
			"get": {
				"description": "list or watch objects of kind ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1ReplicaSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/statefulsets": {
			"get": {
				"description": "list or watch objects of kind StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "listAppsV1StatefulSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/controllerrevisions": {
			"get": {
				"description": "watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1ControllerRevisionListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/daemonsets": {
			"get": {
				"description": "watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1DaemonSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1DeploymentListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions": {
			"get": {
				"description": "watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedControllerRevisionList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}": {
			"get": {
				"description": "watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedControllerRevision",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ControllerRevision",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/daemonsets": {
			"get": {
				"description": "watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedDaemonSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}": {
			"get": {
				"description": "watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedDaemonSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedDeploymentList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedDeployment",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/replicasets": {
			"get": {
				"description": "watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedReplicaSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}": {
			"get": {
				"description": "watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedReplicaSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/statefulsets": {
			"get": {
				"description": "watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedStatefulSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}": {
			"get": {
				"description": "watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1NamespacedStatefulSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/replicasets": {
			"get": {
				"description": "watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1ReplicaSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1/watch/statefulsets": {
			"get": {
				"description": "watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1"
				],
				"operationId": "watchAppsV1StatefulSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "getAppsV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apps/v1beta1/controllerrevisions": {
			"get": {
				"description": "list or watch objects of kind ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "listAppsV1beta1ControllerRevisionForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevisionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "listAppsV1beta1DeploymentForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions": {
			"get": {
				"description": "list or watch objects of kind ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "listAppsV1beta1NamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevisionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "createAppsV1beta1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "deleteAppsV1beta1CollectionNamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}": {
			"get": {
				"description": "read the specified ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "deleteAppsV1beta1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified ControllerRevision",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ControllerRevision",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "listAppsV1beta1NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "createAppsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "deleteAppsV1beta1CollectionNamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "read the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "deleteAppsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback": {
			"post": {
				"description": "create rollback of a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "createAppsV1beta1NamespacedDeploymentRollback",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentRollback"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DeploymentRollback",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DeploymentRollback",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale": {
			"get": {
				"description": "read scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedDeploymentScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status": {
			"get": {
				"description": "read status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedDeploymentStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets": {
			"get": {
				"description": "list or watch objects of kind StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "listAppsV1beta1NamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "createAppsV1beta1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "deleteAppsV1beta1CollectionNamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}": {
			"get": {
				"description": "read the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "deleteAppsV1beta1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale": {
			"get": {
				"description": "read scale of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedStatefulSetScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace scale of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedStatefulSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedStatefulSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status": {
			"get": {
				"description": "read status of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "readAppsV1beta1NamespacedStatefulSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "replaceAppsV1beta1NamespacedStatefulSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "patchAppsV1beta1NamespacedStatefulSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/statefulsets": {
			"get": {
				"description": "list or watch objects of kind StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "listAppsV1beta1StatefulSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/controllerrevisions": {
			"get": {
				"description": "watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1ControllerRevisionListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1DeploymentListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions": {
			"get": {
				"description": "watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1NamespacedControllerRevisionList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}": {
			"get": {
				"description": "watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1NamespacedControllerRevision",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ControllerRevision",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1NamespacedDeploymentList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1NamespacedDeployment",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets": {
			"get": {
				"description": "watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1NamespacedStatefulSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}": {
			"get": {
				"description": "watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1NamespacedStatefulSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta1/watch/statefulsets": {
			"get": {
				"description": "watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta1"
				],
				"operationId": "watchAppsV1beta1StatefulSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "getAppsV1beta2APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/apps/v1beta2/controllerrevisions": {
			"get": {
				"description": "list or watch objects of kind ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2ControllerRevisionForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevisionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/daemonsets": {
			"get": {
				"description": "list or watch objects of kind DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2DaemonSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2DeploymentForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions": {
			"get": {
				"description": "list or watch objects of kind ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2NamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevisionList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"post": {
				"description": "create a ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "createAppsV1beta2NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete collection of ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2CollectionNamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}": {
			"get": {
				"description": "read the specified ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedControllerRevision",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace the specified ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete a ControllerRevision",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update the specified ControllerRevision",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedControllerRevision",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ControllerRevision",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/daemonsets": {
			"get": {
				"description": "list or watch objects of kind DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2NamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"post": {
				"description": "create a DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "createAppsV1beta2NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete collection of DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2CollectionNamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}": {
			"get": {
				"description": "read the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete a DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update the specified DaemonSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status": {
			"get": {
				"description": "read status of the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedDaemonSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace status of the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedDaemonSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update status of the specified DaemonSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedDaemonSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"post": {
				"description": "create a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "createAppsV1beta2NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete collection of Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2CollectionNamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "read the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale": {
			"get": {
				"description": "read scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedDeploymentScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update scale of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status": {
			"get": {
				"description": "read status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedDeploymentStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update status of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/replicasets": {
			"get": {
				"description": "list or watch objects of kind ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2NamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"post": {
				"description": "create a ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "createAppsV1beta2NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete collection of ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2CollectionNamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}": {
			"get": {
				"description": "read the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete a ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale": {
			"get": {
				"description": "read scale of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedReplicaSetScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace scale of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedReplicaSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update scale of the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedReplicaSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status": {
			"get": {
				"description": "read status of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedReplicaSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace status of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedReplicaSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update status of the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedReplicaSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/statefulsets": {
			"get": {
				"description": "list or watch objects of kind StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2NamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"post": {
				"description": "create a StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "createAppsV1beta2NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete collection of StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2CollectionNamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}": {
			"get": {
				"description": "read the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedStatefulSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"delete": {
				"description": "delete a StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "deleteAppsV1beta2NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedStatefulSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale": {
			"get": {
				"description": "read scale of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedStatefulSetScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace scale of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedStatefulSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update scale of the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedStatefulSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Scale",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status": {
			"get": {
				"description": "read status of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "readAppsV1beta2NamespacedStatefulSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"put": {
				"description": "replace status of the specified StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "replaceAppsV1beta2NamespacedStatefulSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"patch": {
				"description": "partially update status of the specified StatefulSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "patchAppsV1beta2NamespacedStatefulSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/replicasets": {
			"get": {
				"description": "list or watch objects of kind ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2ReplicaSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/statefulsets": {
			"get": {
				"description": "list or watch objects of kind StatefulSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "listAppsV1beta2StatefulSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/controllerrevisions": {
			"get": {
				"description": "watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2ControllerRevisionListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/daemonsets": {
			"get": {
				"description": "watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2DaemonSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2DeploymentListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions": {
			"get": {
				"description": "watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedControllerRevisionList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions/{name}": {
			"get": {
				"description": "watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedControllerRevision",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ControllerRevision",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ControllerRevision",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets": {
			"get": {
				"description": "watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedDaemonSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets/{name}": {
			"get": {
				"description": "watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedDaemonSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "DaemonSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedDeploymentList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedDeployment",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "Deployment",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets": {
			"get": {
				"description": "watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedReplicaSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets/{name}": {
			"get": {
				"description": "watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedReplicaSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets": {
			"get": {
				"description": "watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedStatefulSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets/{name}": {
			"get": {
				"description": "watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2NamespacedStatefulSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StatefulSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/replicasets": {
			"get": {
				"description": "watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2ReplicaSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "ReplicaSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/apps/v1beta2/watch/statefulsets": {
			"get": {
				"description": "watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"apps_v1beta2"
				],
				"operationId": "watchAppsV1beta2StatefulSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "apps",
					"kind": "StatefulSet",
					"version": "v1beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/authentication.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authentication"
				],
				"operationId": "getAuthenticationAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/authentication.k8s.io/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authentication_v1"
				],
				"operationId": "getAuthenticationV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/authentication.k8s.io/v1/tokenreviews": {
			"post": {
				"description": "create a TokenReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authentication_v1"
				],
				"operationId": "createAuthenticationV1TokenReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authentication.k8s.io",
					"kind": "TokenReview",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authentication.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authentication_v1beta1"
				],
				"operationId": "getAuthenticationV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/authentication.k8s.io/v1beta1/tokenreviews": {
			"post": {
				"description": "create a TokenReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authentication_v1beta1"
				],
				"operationId": "createAuthenticationV1beta1TokenReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authentication.k8s.io",
					"kind": "TokenReview",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization"
				],
				"operationId": "getAuthorizationAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/authorization.k8s.io/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1"
				],
				"operationId": "getAuthorizationV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {
			"post": {
				"description": "create a LocalSubjectAccessReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1"
				],
				"operationId": "createAuthorizationV1NamespacedLocalSubjectAccessReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "LocalSubjectAccessReview",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1/selfsubjectaccessreviews": {
			"post": {
				"description": "create a SelfSubjectAccessReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1"
				],
				"operationId": "createAuthorizationV1SelfSubjectAccessReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "SelfSubjectAccessReview",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1/selfsubjectrulesreviews": {
			"post": {
				"description": "create a SelfSubjectRulesReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1"
				],
				"operationId": "createAuthorizationV1SelfSubjectRulesReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "SelfSubjectRulesReview",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1/subjectaccessreviews": {
			"post": {
				"description": "create a SubjectAccessReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1"
				],
				"operationId": "createAuthorizationV1SubjectAccessReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "SubjectAccessReview",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1beta1"
				],
				"operationId": "getAuthorizationV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews": {
			"post": {
				"description": "create a LocalSubjectAccessReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1beta1"
				],
				"operationId": "createAuthorizationV1beta1NamespacedLocalSubjectAccessReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "LocalSubjectAccessReview",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews": {
			"post": {
				"description": "create a SelfSubjectAccessReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1beta1"
				],
				"operationId": "createAuthorizationV1beta1SelfSubjectAccessReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "SelfSubjectAccessReview",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews": {
			"post": {
				"description": "create a SelfSubjectRulesReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1beta1"
				],
				"operationId": "createAuthorizationV1beta1SelfSubjectRulesReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "SelfSubjectRulesReview",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/authorization.k8s.io/v1beta1/subjectaccessreviews": {
			"post": {
				"description": "create a SubjectAccessReview",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"authorization_v1beta1"
				],
				"operationId": "createAuthorizationV1beta1SubjectAccessReview",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "authorization.k8s.io",
					"kind": "SubjectAccessReview",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling"
				],
				"operationId": "getAutoscalingAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/autoscaling/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "getAutoscalingV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/autoscaling/v1/horizontalpodautoscalers": {
			"get": {
				"description": "list or watch objects of kind HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {
			"get": {
				"description": "list or watch objects of kind HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "listAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "createAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
			"get": {
				"description": "read the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "readAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "replaceAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "deleteAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified HorizontalPodAutoscaler",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "patchAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
			"get": {
				"description": "read status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v1/watch/horizontalpodautoscalers": {
			"get": {
				"description": "watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers": {
			"get": {
				"description": "watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "watchAutoscalingV1NamespacedHorizontalPodAutoscalerList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
			"get": {
				"description": "watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v1"
				],
				"operationId": "watchAutoscalingV1NamespacedHorizontalPodAutoscaler",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "getAutoscalingV2beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/autoscaling/v2beta1/horizontalpodautoscalers": {
			"get": {
				"description": "list or watch objects of kind HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers": {
			"get": {
				"description": "list or watch objects of kind HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"post": {
				"description": "create a HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"delete": {
				"description": "delete collection of HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
			"get": {
				"description": "read the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"put": {
				"description": "replace the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"delete": {
				"description": "delete a HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"patch": {
				"description": "partially update the specified HorizontalPodAutoscaler",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
			"get": {
				"description": "read status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"put": {
				"description": "replace status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers": {
			"get": {
				"description": "watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers": {
			"get": {
				"description": "watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
			"get": {
				"description": "watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta1"
				],
				"operationId": "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "getAutoscalingV2beta2APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/autoscaling/v2beta2/horizontalpodautoscalers": {
			"get": {
				"description": "list or watch objects of kind HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers": {
			"get": {
				"description": "list or watch objects of kind HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"post": {
				"description": "create a HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"delete": {
				"description": "delete collection of HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
			"get": {
				"description": "read the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"put": {
				"description": "replace the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"delete": {
				"description": "delete a HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"patch": {
				"description": "partially update the specified HorizontalPodAutoscaler",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
			"get": {
				"description": "read status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"put": {
				"description": "replace status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"patch": {
				"description": "partially update status of the specified HorizontalPodAutoscaler",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers": {
			"get": {
				"description": "watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers": {
			"get": {
				"description": "watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
			"get": {
				"description": "watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"autoscaling_v2beta2"
				],
				"operationId": "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "autoscaling",
					"kind": "HorizontalPodAutoscaler",
					"version": "v2beta2"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the HorizontalPodAutoscaler",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch"
				],
				"operationId": "getBatchAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/batch/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "getBatchV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/batch/v1/jobs": {
			"get": {
				"description": "list or watch objects of kind Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "listBatchV1JobForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.JobList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1/namespaces/{namespace}/jobs": {
			"get": {
				"description": "list or watch objects of kind Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "listBatchV1NamespacedJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.JobList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "createBatchV1NamespacedJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "deleteBatchV1CollectionNamespacedJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {
			"get": {
				"description": "read the specified Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "readBatchV1NamespacedJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "replaceBatchV1NamespacedJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "deleteBatchV1NamespacedJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Job",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "patchBatchV1NamespacedJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Job",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status": {
			"get": {
				"description": "read status of the specified Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "readBatchV1NamespacedJobStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace status of the specified Job",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "replaceBatchV1NamespacedJobStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Job",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "patchBatchV1NamespacedJobStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1.Job"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Job",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1/watch/jobs": {
			"get": {
				"description": "watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "watchBatchV1JobListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1/watch/namespaces/{namespace}/jobs": {
			"get": {
				"description": "watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "watchBatchV1NamespacedJobList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}": {
			"get": {
				"description": "watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1"
				],
				"operationId": "watchBatchV1NamespacedJob",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "Job",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Job",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "getBatchV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/batch/v1beta1/cronjobs": {
			"get": {
				"description": "list or watch objects of kind CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "listBatchV1beta1CronJobForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {
			"get": {
				"description": "list or watch objects of kind CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "listBatchV1beta1NamespacedCronJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "createBatchV1beta1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "deleteBatchV1beta1CollectionNamespacedCronJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}": {
			"get": {
				"description": "read the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "readBatchV1beta1NamespacedCronJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "replaceBatchV1beta1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "deleteBatchV1beta1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified CronJob",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "patchBatchV1beta1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CronJob",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status": {
			"get": {
				"description": "read status of the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "readBatchV1beta1NamespacedCronJobStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "replaceBatchV1beta1NamespacedCronJobStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified CronJob",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "patchBatchV1beta1NamespacedCronJobStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CronJob",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/watch/cronjobs": {
			"get": {
				"description": "watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "watchBatchV1beta1CronJobListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs": {
			"get": {
				"description": "watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "watchBatchV1beta1NamespacedCronJobList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}": {
			"get": {
				"description": "watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v1beta1"
				],
				"operationId": "watchBatchV1beta1NamespacedCronJob",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CronJob",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "getBatchV2alpha1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/batch/v2alpha1/cronjobs": {
			"get": {
				"description": "list or watch objects of kind CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "listBatchV2alpha1CronJobForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs": {
			"get": {
				"description": "list or watch objects of kind CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "listBatchV2alpha1NamespacedCronJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"post": {
				"description": "create a CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "createBatchV2alpha1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"delete": {
				"description": "delete collection of CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "deleteBatchV2alpha1CollectionNamespacedCronJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}": {
			"get": {
				"description": "read the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "readBatchV2alpha1NamespacedCronJob",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"put": {
				"description": "replace the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "replaceBatchV2alpha1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"delete": {
				"description": "delete a CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "deleteBatchV2alpha1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"patch": {
				"description": "partially update the specified CronJob",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "patchBatchV2alpha1NamespacedCronJob",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CronJob",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status": {
			"get": {
				"description": "read status of the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "readBatchV2alpha1NamespacedCronJobStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"put": {
				"description": "replace status of the specified CronJob",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "replaceBatchV2alpha1NamespacedCronJobStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"patch": {
				"description": "partially update status of the specified CronJob",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "patchBatchV2alpha1NamespacedCronJobStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CronJob",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/watch/cronjobs": {
			"get": {
				"description": "watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "watchBatchV2alpha1CronJobListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs": {
			"get": {
				"description": "watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "watchBatchV2alpha1NamespacedCronJobList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}": {
			"get": {
				"description": "watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"batch_v2alpha1"
				],
				"operationId": "watchBatchV2alpha1NamespacedCronJob",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "batch",
					"kind": "CronJob",
					"version": "v2alpha1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CronJob",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/certificates.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates"
				],
				"operationId": "getCertificatesAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/certificates.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "getCertificatesV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests": {
			"get": {
				"description": "list or watch objects of kind CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "listCertificatesV1beta1CertificateSigningRequest",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "createCertificatesV1beta1CertificateSigningRequest",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "deleteCertificatesV1beta1CollectionCertificateSigningRequest",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}": {
			"get": {
				"description": "read the specified CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "readCertificatesV1beta1CertificateSigningRequest",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "replaceCertificatesV1beta1CertificateSigningRequest",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "deleteCertificatesV1beta1CertificateSigningRequest",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified CertificateSigningRequest",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "patchCertificatesV1beta1CertificateSigningRequest",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CertificateSigningRequest",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval": {
			"put": {
				"description": "replace approval of the specified CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "replaceCertificatesV1beta1CertificateSigningRequestApproval",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CertificateSigningRequest",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status": {
			"get": {
				"description": "read status of the specified CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "readCertificatesV1beta1CertificateSigningRequestStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified CertificateSigningRequest",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "replaceCertificatesV1beta1CertificateSigningRequestStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified CertificateSigningRequest",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "patchCertificatesV1beta1CertificateSigningRequestStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CertificateSigningRequest",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests": {
			"get": {
				"description": "watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "watchCertificatesV1beta1CertificateSigningRequestList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}": {
			"get": {
				"description": "watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"certificates_v1beta1"
				],
				"operationId": "watchCertificatesV1beta1CertificateSigningRequest",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "certificates.k8s.io",
					"kind": "CertificateSigningRequest",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the CertificateSigningRequest",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/coordination.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination"
				],
				"operationId": "getCoordinationAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/coordination.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "getCoordinationV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/coordination.k8s.io/v1beta1/leases": {
			"get": {
				"description": "list or watch objects of kind Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "listCoordinationV1beta1LeaseForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {
			"get": {
				"description": "list or watch objects of kind Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "listCoordinationV1beta1NamespacedLease",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "createCoordinationV1beta1NamespacedLease",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "deleteCoordinationV1beta1CollectionNamespacedLease",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}": {
			"get": {
				"description": "read the specified Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "readCoordinationV1beta1NamespacedLease",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "replaceCoordinationV1beta1NamespacedLease",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a Lease",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "deleteCoordinationV1beta1NamespacedLease",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified Lease",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "patchCoordinationV1beta1NamespacedLease",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Lease",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/coordination.k8s.io/v1beta1/watch/leases": {
			"get": {
				"description": "watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "watchCoordinationV1beta1LeaseListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases": {
			"get": {
				"description": "watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "watchCoordinationV1beta1NamespacedLeaseList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases/{name}": {
			"get": {
				"description": "watch changes to an object of kind Lease. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"coordination_v1beta1"
				],
				"operationId": "watchCoordinationV1beta1NamespacedLease",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "coordination.k8s.io",
					"kind": "Lease",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Lease",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/events.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events"
				],
				"operationId": "getEventsAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/events.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "getEventsV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/events.k8s.io/v1beta1/events": {
			"get": {
				"description": "list or watch objects of kind Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "listEventsV1beta1EventForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.EventList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {
			"get": {
				"description": "list or watch objects of kind Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "listEventsV1beta1NamespacedEvent",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.EventList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create an Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "createEventsV1beta1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "deleteEventsV1beta1CollectionNamespacedEvent",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}": {
			"get": {
				"description": "read the specified Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "readEventsV1beta1NamespacedEvent",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "replaceEventsV1beta1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete an Event",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "deleteEventsV1beta1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified Event",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "patchEventsV1beta1NamespacedEvent",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Event",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/events.k8s.io/v1beta1/watch/events": {
			"get": {
				"description": "watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "watchEventsV1beta1EventListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events": {
			"get": {
				"description": "watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "watchEventsV1beta1NamespacedEventList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}": {
			"get": {
				"description": "watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"events_v1beta1"
				],
				"operationId": "watchEventsV1beta1NamespacedEvent",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "events.k8s.io",
					"kind": "Event",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Event",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions"
				],
				"operationId": "getExtensionsAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/extensions/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "getExtensionsV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/extensions/v1beta1/daemonsets": {
			"get": {
				"description": "list or watch objects of kind DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1DaemonSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1DeploymentForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/ingresses": {
			"get": {
				"description": "list or watch objects of kind Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1IngressForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets": {
			"get": {
				"description": "list or watch objects of kind DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1NamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1CollectionNamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}": {
			"get": {
				"description": "read the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedDaemonSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified DaemonSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedDaemonSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status": {
			"get": {
				"description": "read status of the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedDaemonSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified DaemonSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedDaemonSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified DaemonSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedDaemonSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/deployments": {
			"get": {
				"description": "list or watch objects of kind Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1CollectionNamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "read the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedDeployment",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedDeployment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback": {
			"post": {
				"description": "create rollback of a Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1NamespacedDeploymentRollback",
				"parameters": [{
					"name": "body",
					"in": "body",
					"required": true,
					"schema": {
						"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentRollback"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DeploymentRollback",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
					"name": "dryRun",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If IncludeUninitialized is specified, the object may be returned without completing initialization.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DeploymentRollback",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale": {
			"get": {
				"description": "read scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedDeploymentScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace scale of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedDeploymentScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status": {
			"get": {
				"description": "read status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedDeploymentStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified Deployment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Deployment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedDeploymentStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {
			"get": {
				"description": "list or watch objects of kind Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1NamespacedIngress",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create an Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1NamespacedIngress",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1CollectionNamespacedIngress",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}": {
			"get": {
				"description": "read the specified Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedIngress",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedIngress",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete an Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1NamespacedIngress",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified Ingress",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedIngress",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Ingress",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status": {
			"get": {
				"description": "read status of the specified Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedIngressStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified Ingress",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedIngressStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified Ingress",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedIngressStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Ingress",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies": {
			"get": {
				"description": "list or watch objects of kind NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1NamespacedNetworkPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}": {
			"get": {
				"description": "read the specified NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedNetworkPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified NetworkPolicy",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the NetworkPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets": {
			"get": {
				"description": "list or watch objects of kind ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1NamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1CollectionNamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}": {
			"get": {
				"description": "read the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedReplicaSet",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedReplicaSet",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale": {
			"get": {
				"description": "read scale of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedReplicaSetScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace scale of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedReplicaSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedReplicaSetScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status": {
			"get": {
				"description": "read status of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedReplicaSetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedReplicaSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified ReplicaSet",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedReplicaSetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {
			"get": {
				"description": "read scale of the specified ReplicationControllerDummy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1NamespacedReplicationControllerDummyScale",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace scale of the specified ReplicationControllerDummy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update scale of the specified ReplicationControllerDummy",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1NamespacedReplicationControllerDummyScale",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Scale"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Scale",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Scale",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/networkpolicies": {
			"get": {
				"description": "list or watch objects of kind NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1NetworkPolicyForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/podsecuritypolicies": {
			"get": {
				"description": "list or watch objects of kind PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1PodSecurityPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicyList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "createExtensionsV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1CollectionPodSecurityPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/podsecuritypolicies/{name}": {
			"get": {
				"description": "read the specified PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "readExtensionsV1beta1PodSecurityPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "replaceExtensionsV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "deleteExtensionsV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified PodSecurityPolicy",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "patchExtensionsV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodSecurityPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/replicasets": {
			"get": {
				"description": "list or watch objects of kind ReplicaSet",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "listExtensionsV1beta1ReplicaSetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/daemonsets": {
			"get": {
				"description": "watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1DaemonSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1DeploymentListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/ingresses": {
			"get": {
				"description": "watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1IngressListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets": {
			"get": {
				"description": "watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedDaemonSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}": {
			"get": {
				"description": "watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedDaemonSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "DaemonSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the DaemonSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments": {
			"get": {
				"description": "watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedDeploymentList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}": {
			"get": {
				"description": "watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedDeployment",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Deployment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Deployment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses": {
			"get": {
				"description": "watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedIngressList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}": {
			"get": {
				"description": "watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedIngress",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "Ingress",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Ingress",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies": {
			"get": {
				"description": "watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedNetworkPolicyList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}": {
			"get": {
				"description": "watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedNetworkPolicy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the NetworkPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets": {
			"get": {
				"description": "watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedReplicaSetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}": {
			"get": {
				"description": "watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NamespacedReplicaSet",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ReplicaSet",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/networkpolicies": {
			"get": {
				"description": "watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1NetworkPolicyListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "NetworkPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/podsecuritypolicies": {
			"get": {
				"description": "watch individual changes to a list of PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1PodSecurityPolicyList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}": {
			"get": {
				"description": "watch changes to an object of kind PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1PodSecurityPolicy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodSecurityPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/extensions/v1beta1/watch/replicasets": {
			"get": {
				"description": "watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"extensions_v1beta1"
				],
				"operationId": "watchExtensionsV1beta1ReplicaSetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "extensions",
					"kind": "ReplicaSet",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/networking.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking"
				],
				"operationId": "getNetworkingAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/networking.k8s.io/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "getNetworkingV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {
			"get": {
				"description": "list or watch objects of kind NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "listNetworkingV1NamespacedNetworkPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "createNetworkingV1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "deleteNetworkingV1CollectionNamespacedNetworkPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}": {
			"get": {
				"description": "read the specified NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "readNetworkingV1NamespacedNetworkPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "replaceNetworkingV1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "deleteNetworkingV1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified NetworkPolicy",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "patchNetworkingV1NamespacedNetworkPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the NetworkPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/networking.k8s.io/v1/networkpolicies": {
			"get": {
				"description": "list or watch objects of kind NetworkPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "listNetworkingV1NetworkPolicyForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies": {
			"get": {
				"description": "watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "watchNetworkingV1NamespacedNetworkPolicyList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}": {
			"get": {
				"description": "watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "watchNetworkingV1NamespacedNetworkPolicy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the NetworkPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/networking.k8s.io/v1/watch/networkpolicies": {
			"get": {
				"description": "watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"networking_v1"
				],
				"operationId": "watchNetworkingV1NetworkPolicyListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "networking.k8s.io",
					"kind": "NetworkPolicy",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/policy/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy"
				],
				"operationId": "getPolicyAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/policy/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "getPolicyV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {
			"get": {
				"description": "list or watch objects of kind PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "listPolicyV1beta1NamespacedPodDisruptionBudget",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "createPolicyV1beta1NamespacedPodDisruptionBudget",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}": {
			"get": {
				"description": "read the specified PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "readPolicyV1beta1NamespacedPodDisruptionBudget",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "replacePolicyV1beta1NamespacedPodDisruptionBudget",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "deletePolicyV1beta1NamespacedPodDisruptionBudget",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified PodDisruptionBudget",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "patchPolicyV1beta1NamespacedPodDisruptionBudget",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodDisruptionBudget",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status": {
			"get": {
				"description": "read status of the specified PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace status of the specified PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update status of the specified PodDisruptionBudget",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodDisruptionBudget",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/poddisruptionbudgets": {
			"get": {
				"description": "list or watch objects of kind PodDisruptionBudget",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/podsecuritypolicies": {
			"get": {
				"description": "list or watch objects of kind PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "listPolicyV1beta1PodSecurityPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicyList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "createPolicyV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "deletePolicyV1beta1CollectionPodSecurityPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/podsecuritypolicies/{name}": {
			"get": {
				"description": "read the specified PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "readPolicyV1beta1PodSecurityPolicy",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "replacePolicyV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a PodSecurityPolicy",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "deletePolicyV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified PodSecurityPolicy",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "patchPolicyV1beta1PodSecurityPolicy",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodSecurityPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets": {
			"get": {
				"description": "watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "watchPolicyV1beta1NamespacedPodDisruptionBudgetList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}": {
			"get": {
				"description": "watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "watchPolicyV1beta1NamespacedPodDisruptionBudget",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodDisruptionBudget",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/watch/poddisruptionbudgets": {
			"get": {
				"description": "watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodDisruptionBudget",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/watch/podsecuritypolicies": {
			"get": {
				"description": "watch individual changes to a list of PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "watchPolicyV1beta1PodSecurityPolicyList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/policy/v1beta1/watch/podsecuritypolicies/{name}": {
			"get": {
				"description": "watch changes to an object of kind PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"policy_v1beta1"
				],
				"operationId": "watchPolicyV1beta1PodSecurityPolicy",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "policy",
					"kind": "PodSecurityPolicy",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PodSecurityPolicy",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization"
				],
				"operationId": "getRbacAuthorizationAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/rbac.authorization.k8s.io/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "getRbacAuthorizationV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/rbac.authorization.k8s.io/v1/clusterrolebindings": {
			"get": {
				"description": "list or watch objects of kind ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "listRbacAuthorizationV1ClusterRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBindingList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "createRbacAuthorizationV1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1CollectionClusterRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}": {
			"get": {
				"description": "read the specified ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "readRbacAuthorizationV1ClusterRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "replaceRbacAuthorizationV1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ClusterRoleBinding",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "patchRbacAuthorizationV1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/clusterroles": {
			"get": {
				"description": "list or watch objects of kind ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "listRbacAuthorizationV1ClusterRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "createRbacAuthorizationV1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1CollectionClusterRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}": {
			"get": {
				"description": "read the specified ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "readRbacAuthorizationV1ClusterRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "replaceRbacAuthorizationV1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified ClusterRole",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "patchRbacAuthorizationV1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRole",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {
			"get": {
				"description": "list or watch objects of kind RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "listRbacAuthorizationV1NamespacedRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBindingList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "createRbacAuthorizationV1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1CollectionNamespacedRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}": {
			"get": {
				"description": "read the specified RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "readRbacAuthorizationV1NamespacedRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "replaceRbacAuthorizationV1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified RoleBinding",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "patchRbacAuthorizationV1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the RoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {
			"get": {
				"description": "list or watch objects of kind Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "listRbacAuthorizationV1NamespacedRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "createRbacAuthorizationV1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1CollectionNamespacedRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}": {
			"get": {
				"description": "read the specified Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "readRbacAuthorizationV1NamespacedRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "replaceRbacAuthorizationV1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "deleteRbacAuthorizationV1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified Role",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "patchRbacAuthorizationV1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Role",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/rolebindings": {
			"get": {
				"description": "list or watch objects of kind RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "listRbacAuthorizationV1RoleBindingForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBindingList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/roles": {
			"get": {
				"description": "list or watch objects of kind Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "listRbacAuthorizationV1RoleForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1.RoleList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings": {
			"get": {
				"description": "watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1ClusterRoleBindingList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}": {
			"get": {
				"description": "watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1ClusterRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/clusterroles": {
			"get": {
				"description": "watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1ClusterRoleList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}": {
			"get": {
				"description": "watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1ClusterRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRole",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings": {
			"get": {
				"description": "watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1NamespacedRoleBindingList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}": {
			"get": {
				"description": "watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1NamespacedRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the RoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles": {
			"get": {
				"description": "watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1NamespacedRoleList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}": {
			"get": {
				"description": "watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1NamespacedRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Role",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/rolebindings": {
			"get": {
				"description": "watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1RoleBindingListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1/watch/roles": {
			"get": {
				"description": "watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1"
				],
				"operationId": "watchRbacAuthorizationV1RoleListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "getRbacAuthorizationV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings": {
			"get": {
				"description": "list or watch objects of kind ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "listRbacAuthorizationV1beta1ClusterRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBindingList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "createRbacAuthorizationV1beta1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}": {
			"get": {
				"description": "read the specified ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "readRbacAuthorizationV1beta1ClusterRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "replaceRbacAuthorizationV1beta1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a ClusterRoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified ClusterRoleBinding",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "patchRbacAuthorizationV1beta1ClusterRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/clusterroles": {
			"get": {
				"description": "list or watch objects of kind ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "listRbacAuthorizationV1beta1ClusterRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "createRbacAuthorizationV1beta1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1CollectionClusterRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}": {
			"get": {
				"description": "read the specified ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "readRbacAuthorizationV1beta1ClusterRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "replaceRbacAuthorizationV1beta1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a ClusterRole",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified ClusterRole",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "patchRbacAuthorizationV1beta1ClusterRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRole",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings": {
			"get": {
				"description": "list or watch objects of kind RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "listRbacAuthorizationV1beta1NamespacedRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBindingList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "createRbacAuthorizationV1beta1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}": {
			"get": {
				"description": "read the specified RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "readRbacAuthorizationV1beta1NamespacedRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "replaceRbacAuthorizationV1beta1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified RoleBinding",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "patchRbacAuthorizationV1beta1NamespacedRoleBinding",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the RoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles": {
			"get": {
				"description": "list or watch objects of kind Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "listRbacAuthorizationV1beta1NamespacedRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "createRbacAuthorizationV1beta1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1CollectionNamespacedRole",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}": {
			"get": {
				"description": "read the specified Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "readRbacAuthorizationV1beta1NamespacedRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "replaceRbacAuthorizationV1beta1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "deleteRbacAuthorizationV1beta1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified Role",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "patchRbacAuthorizationV1beta1NamespacedRole",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Role",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/rolebindings": {
			"get": {
				"description": "list or watch objects of kind RoleBinding",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "listRbacAuthorizationV1beta1RoleBindingForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBindingList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/roles": {
			"get": {
				"description": "list or watch objects of kind Role",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "listRbacAuthorizationV1beta1RoleForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings": {
			"get": {
				"description": "watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1ClusterRoleBindingList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}": {
			"get": {
				"description": "watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1ClusterRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles": {
			"get": {
				"description": "watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1ClusterRoleList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}": {
			"get": {
				"description": "watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1ClusterRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "ClusterRole",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the ClusterRole",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings": {
			"get": {
				"description": "watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1NamespacedRoleBindingList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}": {
			"get": {
				"description": "watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1NamespacedRoleBinding",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the RoleBinding",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles": {
			"get": {
				"description": "watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1NamespacedRoleList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}": {
			"get": {
				"description": "watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1NamespacedRole",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the Role",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "object name and auth scope, such as for teams and projects",
					"name": "namespace",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings": {
			"get": {
				"description": "watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "RoleBinding",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/rbac.authorization.k8s.io/v1beta1/watch/roles": {
			"get": {
				"description": "watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"rbacAuthorization_v1beta1"
				],
				"operationId": "watchRbacAuthorizationV1beta1RoleListForAllNamespaces",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "rbac.authorization.k8s.io",
					"kind": "Role",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/scheduling.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling"
				],
				"operationId": "getSchedulingAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/scheduling.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "getSchedulingV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/scheduling.k8s.io/v1beta1/priorityclasses": {
			"get": {
				"description": "list or watch objects of kind PriorityClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "listSchedulingV1beta1PriorityClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClassList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a PriorityClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "createSchedulingV1beta1PriorityClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of PriorityClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "deleteSchedulingV1beta1CollectionPriorityClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}": {
			"get": {
				"description": "read the specified PriorityClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "readSchedulingV1beta1PriorityClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified PriorityClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "replaceSchedulingV1beta1PriorityClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a PriorityClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "deleteSchedulingV1beta1PriorityClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified PriorityClass",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "patchSchedulingV1beta1PriorityClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PriorityClass",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses": {
			"get": {
				"description": "watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "watchSchedulingV1beta1PriorityClassList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses/{name}": {
			"get": {
				"description": "watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"scheduling_v1beta1"
				],
				"operationId": "watchSchedulingV1beta1PriorityClass",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "scheduling.k8s.io",
					"kind": "PriorityClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the PriorityClass",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/": {
			"get": {
				"description": "get information of a group",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage"
				],
				"operationId": "getStorageAPIGroup",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/storage.k8s.io/v1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "getStorageV1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/storage.k8s.io/v1/storageclasses": {
			"get": {
				"description": "list or watch objects of kind StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "listStorageV1StorageClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClassList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"post": {
				"description": "create a StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "createStorageV1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete collection of StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "deleteStorageV1CollectionStorageClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1/storageclasses/{name}": {
			"get": {
				"description": "read the specified StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "readStorageV1StorageClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"put": {
				"description": "replace the specified StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "replaceStorageV1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"delete": {
				"description": "delete a StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "deleteStorageV1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"patch": {
				"description": "partially update the specified StorageClass",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "patchStorageV1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StorageClass",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1/watch/storageclasses": {
			"get": {
				"description": "watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "watchStorageV1StorageClassList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1/watch/storageclasses/{name}": {
			"get": {
				"description": "watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1"
				],
				"operationId": "watchStorageV1StorageClass",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StorageClass",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/": {
			"get": {
				"description": "get available resources",
				"consumes": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "getStorageV1beta1APIResources",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/storage.k8s.io/v1beta1/storageclasses": {
			"get": {
				"description": "list or watch objects of kind StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "listStorageV1beta1StorageClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClassList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "createStorageV1beta1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "deleteStorageV1beta1CollectionStorageClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/storageclasses/{name}": {
			"get": {
				"description": "read the specified StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "readStorageV1beta1StorageClass",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "replaceStorageV1beta1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a StorageClass",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "deleteStorageV1beta1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified StorageClass",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "patchStorageV1beta1StorageClass",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StorageClass",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/volumeattachments": {
			"get": {
				"description": "list or watch objects of kind VolumeAttachment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "listStorageV1beta1VolumeAttachment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "list",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"post": {
				"description": "create a VolumeAttachment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "createStorageV1beta1VolumeAttachment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "post",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete collection of VolumeAttachment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "deleteStorageV1beta1CollectionVolumeAttachment",
				"parameters": [{
						"uniqueItems": true,
						"type": "string",
						"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
						"name": "continue",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"name": "fieldSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"name": "labelSelector",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
						"name": "limit",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"name": "resourceVersion",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"name": "timeoutSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
						"name": "watch",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "deletecollection",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/volumeattachments/{name}": {
			"get": {
				"description": "read the specified VolumeAttachment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "readStorageV1beta1VolumeAttachment",
				"parameters": [{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
						"name": "exact",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Should this value be exported.  Export strips fields that a user can not specify.",
						"name": "export",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "get",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"put": {
				"description": "replace the specified VolumeAttachment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "replaceStorageV1beta1VolumeAttachment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "put",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"delete": {
				"description": "delete a VolumeAttachment",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "deleteStorageV1beta1VolumeAttachment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "integer",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"name": "gracePeriodSeconds",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "boolean",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"name": "orphanDependents",
						"in": "query"
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
						"name": "propagationPolicy",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "delete",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"patch": {
				"description": "partially update the specified VolumeAttachment",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json",
					"application/strategic-merge-patch+json"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "patchStorageV1beta1VolumeAttachment",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
						}
					},
					{
						"uniqueItems": true,
						"type": "string",
						"description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
						"name": "dryRun",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "patch",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the VolumeAttachment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/watch/storageclasses": {
			"get": {
				"description": "watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "watchStorageV1beta1StorageClassList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}": {
			"get": {
				"description": "watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "watchStorageV1beta1StorageClass",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "StorageClass",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the StorageClass",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/watch/volumeattachments": {
			"get": {
				"description": "watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "watchStorageV1beta1VolumeAttachmentList",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watchlist",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}": {
			"get": {
				"description": "watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/yaml",
					"application/vnd.kubernetes.protobuf",
					"application/json;stream=watch",
					"application/vnd.kubernetes.protobuf;stream=watch"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"storage_v1beta1"
				],
				"operationId": "watchStorageV1beta1VolumeAttachment",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"x-kubernetes-action": "watch",
				"x-kubernetes-group-version-kind": {
					"group": "storage.k8s.io",
					"kind": "VolumeAttachment",
					"version": "v1beta1"
				}
			},
			"parameters": [{
					"uniqueItems": true,
					"type": "string",
					"description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
					"name": "continue",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
					"name": "fieldSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "If true, partially initialized resources are included in the response.",
					"name": "includeUninitialized",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
					"name": "labelSelector",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
					"name": "limit",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "name of the VolumeAttachment",
					"name": "name",
					"in": "path",
					"required": true
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "If 'true', then the output is pretty printed.",
					"name": "pretty",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "string",
					"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
					"name": "resourceVersion",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "integer",
					"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
					"name": "timeoutSeconds",
					"in": "query"
				},
				{
					"uniqueItems": true,
					"type": "boolean",
					"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
					"name": "watch",
					"in": "query"
				}
			]
		},
		"/logs/": {
			"get": {
				"schemes": [
					"https"
				],
				"tags": [
					"logs"
				],
				"operationId": "logFileListHandler",
				"responses": {
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/logs/{logpath}": {
			"get": {
				"schemes": [
					"https"
				],
				"tags": [
					"logs"
				],
				"operationId": "logFileHandler",
				"responses": {
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"parameters": [{
				"uniqueItems": true,
				"type": "string",
				"description": "path to the log",
				"name": "logpath",
				"in": "path",
				"required": true
			}]
		},
		"/version/": {
			"get": {
				"description": "get the code version",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"version"
				],
				"operationId": "getCodeVersion",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.k8s.apimachinery.pkg.version.Info"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		}
	}
}